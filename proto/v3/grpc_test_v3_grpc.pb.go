// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcTestV3Client is the client API for GrpcTestV3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcTestV3Client interface {
	Test(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type grpcTestV3Client struct {
	cc grpc.ClientConnInterface
}

func NewGrpcTestV3Client(cc grpc.ClientConnInterface) GrpcTestV3Client {
	return &grpcTestV3Client{cc}
}

func (c *grpcTestV3Client) Test(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc_test.v3.GrpcTestV3/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcTestV3Server is the server API for GrpcTestV3 service.
// All implementations must embed UnimplementedGrpcTestV3Server
// for forward compatibility
type GrpcTestV3Server interface {
	Test(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGrpcTestV3Server()
}

// UnimplementedGrpcTestV3Server must be embedded to have forward compatible implementations.
type UnimplementedGrpcTestV3Server struct {
}

func (UnimplementedGrpcTestV3Server) Test(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedGrpcTestV3Server) mustEmbedUnimplementedGrpcTestV3Server() {}

// UnsafeGrpcTestV3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcTestV3Server will
// result in compilation errors.
type UnsafeGrpcTestV3Server interface {
	mustEmbedUnimplementedGrpcTestV3Server()
}

func RegisterGrpcTestV3Server(s grpc.ServiceRegistrar, srv GrpcTestV3Server) {
	s.RegisterService(&GrpcTestV3_ServiceDesc, srv)
}

func _GrpcTestV3_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcTestV3Server).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_test.v3.GrpcTestV3/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcTestV3Server).Test(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcTestV3_ServiceDesc is the grpc.ServiceDesc for GrpcTestV3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcTestV3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_test.v3.GrpcTestV3",
	HandlerType: (*GrpcTestV3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _GrpcTestV3_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_test_v3.proto",
}
